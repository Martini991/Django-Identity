"""
Django settings for djangosaml2_sp project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'btl-x0ja09$zqer3h^n^_ic!9h+1q0g!-wqzj&&zio@(@5p*no'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    # custom user model
    'custom_accounts',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # SAML2 SP
    'djangosaml2',
    'saml2_sp',
    'djangosaml2_spid'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # SAML session with SameSite = None
    'djangosaml2.middleware.SamlSessionMiddleware'
]

SAML_SESSION_COOKIE_NAME = 'saml_session'

ROOT_URLCONF = 'djangosaml2_sp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangosaml2_sp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'sqlite3.db',
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'custom_accounts.User'

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

#
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 60 * 60  # an hour

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


if 'saml2_sp' in INSTALLED_APPS or \
   'djangosaml2_spid' in INSTALLED_APPS:

    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
        'djangosaml2.backends.Saml2Backend',
    )


# SPID SP
if 'djangosaml2_spid' in INSTALLED_APPS:
    from djangosaml2_spid.settings import *
    from djangosaml2_spid.settings import SAML_CONFIG, SPID_DEFAULT_BINDING, saml2

    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    BASE = 'http://hostnet:8000'
    BASE_URL = '{}/saml2'.format(BASE)

    SPID_CONTACTS = [
        {
            'contact_type': 'billing',
            'telephone_number': '+39 84756344785',
            'email_address': 'info@example.org',
            'company': 'example s.p.a.',
            # 'CodiceFiscale': 'NGLMRA80A01D086T',
            'IdCodice': '983745349857',
            'IdPaese': 'IT',
            'Denominazione': 'Destinatario Fatturazione',
            'Indirizzo': 'via tante cose',
            'NumeroCivico': '12',
            'CAP': '87100',
            'Comune': 'Cosenza',
            'Provincia': 'CS',
            'Nazione': 'IT',
        },
    ]

    SAML_CONFIG.update({
        'entityid': f'{BASE_DIR}/metadata/',
        'metadata': {
            "remote": [
                {
                    'name': 'spid-testenv2',
                    'url': 'http://hostnet:8088/metadata'
                },
                # {
                #     'name': 'spid-saml-check',
                #     'url': 'http://hostnet:8080/metadata.xml'
                # },
            ]
        },

        # Signing
        'key_file': f'{BASE_DIR}/certificates/private.key',
        'cert_file': f'{BASE_DIR}/certificates/public.cert',

        # Encryption
        'encryption_keypairs': [{
            'key_file': f'{BASE_DIR}/certificates/private.key',
            'cert_file': f'{BASE_DIR}/certificates/public.cert',
        }],

        # you can set multilanguage information here
        'organization': {
            'name': [('Example', 'it'), ('Example', 'en')],
            'display_name': [('Example', 'it'), ('Example', 'en')],
            'url': [('http://www.example.it', 'it'), ('http://www.example.it', 'en')],
        },
    })

    SAML_CONFIG['service']['sp'].update({
        'name': f'{BASE_URL}/metadata/',
        'name_qualifier': BASE,
        'endpoints': {
            'assertion_consumer_service': [
                (f'{BASE_URL}/acs/', SPID_DEFAULT_BINDING),
            ],
            'single_logout_service': [
                (f'{BASE_URL}/ls/post/', saml2.BINDING_HTTP_POST),
                (f'{BASE_URL}/ls/', saml2.BINDING_HTTP_REDIRECT),
            ],
        },
    })

elif 'saml2_sp' in INSTALLED_APPS:
    from . sp_pysaml2_satosa import *


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'djangosaml2': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    }
}
